
from .plot import Plot
from .distribution import Distribution as D
from .kpi import Kpi as K
from .relation import Relation as R
from .compare import Compare as C
from .geo import Geo as G
from .scatterMatrix import ScatterMatrix as S
from .correlationMatrix import CorrelationMatrix as CR
from .utils import Utils
import random


import pandas as pd 
import os
import sys



class Visualize :
    """
        Visualize
        -------------
        Methods:
        --------
         __init__([df,dicte]): Initialize a Visualizer
         plots([Distributions,Dist_subplots]): Return plots
    
        Example :
        -----------------
        >>> from data_exploration.visualize import Visualize
        >>> from data_overview.overviewer import Overviewer
        >>> import pandas as pd
        >>> d = {'A': [10,2,15,12],
        ...     'B': [2,4,5,1],
        ...     'C': [1,2,10,20]}
        >>> df = pd.DataFrame(d, columns = ['A', 'B','C'])   
        >>> Overviewer= Overviewer(df)
        >>> dicte= Overviewer.insert_annotation_json()
        >>> Visualizer = Visualize (df,dicte) 
        >>> Visualizer.plot(auto_open=False)

        """

    def __init__(self,df=None,dicte=None):
        '''
        Parameters
        -----
        • df (pandas.Dataframe) - Dataframe\\
        • dicte (dict)          - Dictionary of data types and annotations generated by the "data_overview" module
        '''
        self.df=df
        self.Utils=Utils(dicte)


    def plots(self, Distributions=[],Dist_subplots=False, stacked_kpis=False, relations=[], comparisons=[], comparison_type=None, matrix_cols=[], corr=None,auto_open=True):
        ''' 
        Generate a various number of plots
        
        Parameters
        -----
        • Distributions ([str,str,str,...]) - Name of columns to plots their distributions\\
                                              Default: All columns in the dataframe\\
        • Dist_subplots (bool,Optional)     - if True Columns with the same type will be plotted as subplots\\
                                              Default: False\\
        • stacked_kpis (bool,Optional)      - If True the kpis will be plotted as a stacked line charts\\
        • comparisons ([[str,str],[str,str],...])     - Name of columns to show comparisons between them \\
        • relations ([[str,str,str],[str,str],...]) - Name of columns to show relations between them\\
        • comparison_type (str) - Type of the comparioson plot: "Bar" or "Box"
        • matrix_cols ([str,str,str,...])   - Return a scatter matrix
        • corr (str)                        - Return a correlation matrix using : "spearman" or "pearson"
        • auto_open (bool,Optional)         - If true the plots will open automatically in the browser

        Returns
        -----------
        plots saved offline in HTML format
        
        '''
        Annotations=self.Utils.GetListOfAnnotations()
        Types=self.Utils.GetListOfTypes()

        kpis,geos,Datetime=Annotations
        Numerical_Categorical,Numerical_Continuous,Numerical_High_cardinality, Text_High_cardinality,Text_Categorical=Types
        existing_types=[]
        for e in Types:
            if len(e)>0:
                existing_types.append(e)
        Distribution=D()
        if len(Distributions)==0:
            if Dist_subplots:
                for e in existing_types:
                    Distribution.trace(Dataframe=self.df,columns=e,type=self.Utils.GetTypeByColumnName(e[0]),auto_open=auto_open)
            else :
                for d in existing_types:
                    for e in d :
                        Distribution.trace(Dataframe=self.df,columns=[e],type=self.Utils.GetTypeByColumnName(e),auto_open=auto_open)
        else : 
            for e in Distributions:
                Distribution.trace(Dataframe=self.df,columns=[e],type=self.Utils.GetTypeByColumnName(e),auto_open=auto_open)
        Kpi=K()
        if len(kpis)>0 and len(Datetime)>0 :
            if stacked_kpis:
                for e in Datetime: 
                    Kpi.trace(Dataframe=self.df,kpis=kpis,time_column=e)
                    Kpi.plot(auto_open=auto_open)
            else :
                for k in kpis :
                    for e in Datetime:
                        Kpi.trace(Dataframe=self.df,kpis=[k],time_column=e)
                        Kpi.plot(auto_open=auto_open)

        Numerical=Numerical_Categorical+Numerical_Continuous+Numerical_High_cardinality
        categorical= Text_High_cardinality,Text_Categorical
        Relation=R()

        if len(relations)==0:
            if len(Numerical)>0 :
                i=1
                for e in Numerical[:len(Numerical)-1] :
                    for c in Numerical[i:]:
                        Relation.trace(Dataframe=self.df,x=e, y=c)
                        Relation.plot(auto_open=auto_open)
                    i=i+1
            if len(Numerical)>=3:
                diff=3
                for i in range(0,len(Numerical),3):  
                    diff = 3 if len(Numerical)-i >=3 else len(Numerical)-i
                    if diff==3:
                        Relation.trace(Dataframe=self.df,x=Numerical[i], y=Numerical[i+1],z=Numerical[i+2])
                        Relation.plot(auto_open=auto_open)
                    elif diff==2:
                        Relation.trace(Dataframe=self.df,x=Numerical[i-1], y=Numerical[i],z=Numerical[i+1])
                        Relation.plot(auto_open=auto_open)
                    elif diff==1:
                        Relation.trace(Dataframe=self.df,x=Numerical[i-2], y=Numerical[i-1],z=Numerical[i])
                        Relation.plot(auto_open=auto_open)
                    else : 
                        continue
        else : 
            for r in relations : 
                if len(r)==2 : 
                    Relation.trace(Dataframe=self.df,x=r[0], y=r[1])
                    Relation.plot(auto_open=auto_open)
                elif len(r)==3 : 
                    Relation.trace(Dataframe=self.df,x=r[0], y=r[1],z=r[2])
                    Relation.plot(auto_open=auto_open)
                else : 
                    raise ValueError("Error : You should specify 2 or 3 column names to display relationship")
        Compare=C()
        if len(comparisons)==0:
            if len(Numerical)>0 and len(Text_Categorical)>0 :
                for e in Numerical :
                    for c in Text_Categorical:
                        if comparison_type=="Box":
                            Compare.trace(Dataframe=self.df,x=e, y=c,type='Box')
                            Compare.plot(auto_open=auto_open)
                        elif comparison_type=="Bar":
                            Compare.trace(Dataframe=self.df,x=e, y=c)
                            Compare.plot(auto_open=auto_open)
                        else:
                            Compare.trace(Dataframe=self.df,x=e, y=c)
                            Compare.plot(auto_open=auto_open)
                            Compare.trace(Dataframe=self.df,x=e, y=c,type='Box')
                            Compare.plot(auto_open=auto_open)
        else : 
            for e in comparisons :
                if comparison_type=="Box":
                    Compare.trace(Dataframe=self.df,x=e[0], y=e[1],type='Box')
                    Compare.plot(auto_open=auto_open)
                elif comparison_type=="Bar":
                    Compare.trace(Dataframe=self.df,x=e[0], y=e[1])
                    Compare.plot(auto_open=auto_open)
                else:
                    Compare.trace(Dataframe=self.df,x=e[0], y=e[1])
                    Compare.plot(auto_open=auto_open)
                    Compare.trace(Dataframe=self.df,x=e[0], y=e[1],type='Box')
                    Compare.plot(auto_open=auto_open)

        CorrelationMatrix=CR()
        cols=Numerical if len(matrix_cols)==0 else matrix_cols
        if len(cols)>=2:
            if corr=='spearman' :
                CorrelationMatrix.trace(Dataframe=self.df,columns=cols,coef='spearman')
                CorrelationMatrix.plot(auto_open=auto_open)
            elif corr=='pearson' :
                CorrelationMatrix.trace(Dataframe=self.df,columns=cols)
                CorrelationMatrix.plot(auto_open=auto_open)
            else : 
                CorrelationMatrix.trace(Dataframe=self.df,columns=cols)
                CorrelationMatrix.plot(auto_open=auto_open)
                CorrelationMatrix.trace(Dataframe=self.df,columns=cols,coef='spearman')
                CorrelationMatrix.plot(auto_open=auto_open)
            ScatterMatrix=S()
            ScatterMatrix.trace(Dataframe=self.df,columns=cols)
            ScatterMatrix.plot(auto_open=auto_open)

        Geo=G()
        if (len(geos)==2):
            Geo.trace(Dataframe=self.df,longitude=geos['Longitude'], latitude=geos['Latitude'])
            Geo.plot(auto_open=auto_open)
        


